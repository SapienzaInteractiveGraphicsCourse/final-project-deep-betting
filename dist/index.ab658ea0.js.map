{"mappings":"0nBAAA,IAAAA,EAAAC,EAAA,S,iEAQA,MAAMC,E,eAEEA,EAASC,QAAS,EAClB,MAAMC,EAAa,IAAI,EAAAC,EAAAC,YAEjBC,EAAA,IAAAC,IAAAP,EAAA,UACNG,EAAWK,KAAKF,EAAcG,MAAM,SAASC,GAEzCT,EAASU,KAAO,IAAIZ,EAAAa,SACpBX,EAASU,KAAKE,IAAIH,EAAKI,OACvBb,EAASc,MAAQL,EAAKM,WAGtBf,EAASC,QAAS,EAClBD,EAASgB,kBAAoB,GACjC,GACJ,E,GAEAC,YAAYJ,EAAOK,EAAOC,EAAGC,EAAGC,EAAGC,GAC/BC,KAAKC,KAAOC,EAAAC,MAAoB1B,EAASU,MACzCa,KAAKC,KAAKG,SAAS,SAASC,GACrBA,EAAKC,SAAQD,EAAKE,YAAa,EACtC,EAAEC,KAAKR,OAEPA,KAAKC,KAAKQ,SAASC,IAAId,EAAGC,EAAGC,GAC7BE,KAAKC,KAAKU,MAAMD,IAAI,GAAG,GAAG,IAC1BpB,EAAMD,IAAIW,KAAKC,MAGf,MAAMW,EAAO,IAAIC,EAAAC,KACXC,EAAkB,IAAIF,EAAAG,gBAAuB,IAAIH,EAAAI,SAAmB,IAAIJ,EAAAI,SAAmB,CAAEC,SAAU,GAAMC,YAAa,IAEhIP,EAAKhB,EAAI,IACTgB,EAAKf,EAAI,IACTe,EAAKd,EAAI,IAET,MAAMsB,EAAQ,IAAIP,EAAAQ,IAAWT,GAC7B,IAAIU,EAAa,IAAIT,EAAAU,KAAY,CAC7BC,KAAM,GACNJ,MAAOA,EACPX,SAAU,IAAII,EAAAC,KAAYd,KAAKC,KAAKQ,SAASb,EAAEI,KAAKC,KAAKQ,SAASZ,EAAEG,KAAKC,KAAKQ,SAASX,GACvF2B,SAAUV,EACVW,KAAMb,EAAAU,KAAYI,UAEtBhC,EAAMiC,QAAQN,GACdtB,KAAK6B,YAAcP,EAEnBtB,KAAKD,WAA2B+B,MAAd/B,GAAyC,GAAdA,EACvB,GAAnBC,KAAKD,YACJgC,QAAQC,IAAI,4BAA4BhC,KAAKC,KAAKgC,GAAG,kBAAkBjC,KAAKC,KAAKQ,SAASb,EAAE,MAAMI,KAAKC,KAAKQ,SAASZ,EAAE,MAAMG,KAAKC,KAAKQ,SAASX,EAExJ,CAEAoC,WAAWC,EAAMC,GACbL,QAAQC,IAAI,4BAA4BhC,KAAK6B,YAAYpB,UACzDsB,QAAQC,IAAIG,GACZJ,QAAQC,IAAII,GACZpC,KAAK6B,YAAYQ,aAAaF,EAAMC,EAExC,E,sCCnEJE,EAAAC,QAAiB,IAAAxD,IAAoBP,EAAA,SAAAgE,QAA6C,SAAAC,OAAAC,KAAAC,KAAUC,U,ICA5FpE,EAAA,SAAAqE,SAA8CC,KAAKC,MAAM,kG","sources":["js/obstacle.js","node_modules/@parcel/runtime-js/lib/runtime-97c61341af934cb0.js","node_modules/@parcel/runtime-js/lib/runtime-784af6e9caed5647.js"],"sourcesContent":["import * as THREE from 'three';\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader'\nimport {dumpObject} from './utility.js'\nimport * as SkeletonUtils from 'three/examples/jsm/utils/SkeletonUtils.js'\nimport * as CANNON from 'cannon-es';\nimport gsap from 'gsap'\nimport  * as dat from \"dat.gui\"\n\nclass Obstacle {\n    static{\n        Obstacle.loaded = false;\n        const gltfLoader = new GLTFLoader();\n        //Load a glTF resource\n        const obstacleAsset = new URL( '../assets/Crate.gltf', import.meta.url)\n        gltfLoader.load(obstacleAsset.href, function(gltf){\n\n            Obstacle.root = new THREE.Object3D;\n            Obstacle.root.add(gltf.scene);\n            Obstacle.clips = gltf.animations;\n\n            // console.log(dumpObject(Robot.root).join('\\n'));\n            Obstacle.loaded = true;\n            Obstacle.yBodyDisplacement = 1.4;\n        })\n    }\n\n    constructor(scene, world, x, y, z, is_spawned){\n        this.mesh = SkeletonUtils.clone(Obstacle.root);\n        this.mesh.traverse(function(node){\n            if(node.isMesh) node.castShadow = true;\n        }.bind(this))\n\n        this.mesh.position.set(x, y, z);\n        this.mesh.scale.set(40,40,40);\n        scene.add(this.mesh);\n\n        //add physics\n        const size = new CANNON.Vec3();\n        const ostacoliPhysMat = new CANNON.ContactMaterial(new CANNON.Material(), new CANNON.Material(), { friction: 10.0, restitution: 0.0 });\n\n        size.x = 1.6;\n        size.y = 1.6;\n        size.z = 1.6;\n\n        const shape = new CANNON.Box(size);\n        let BodyCANNON = new CANNON.Body({ \n            mass: 15, \n            shape: shape, \n            position: new CANNON.Vec3(this.mesh.position.x,this.mesh.position.y,this.mesh.position.z),\n            material: ostacoliPhysMat,\n            type: CANNON.Body.DYNAMIC\n        })\n        world.addBody(BodyCANNON);\n        this.physicsBody = BodyCANNON;\n\n        this.is_spawned = is_spawned != undefined && is_spawned == true ? true : false;\n        if(this.is_spawned == true){\n            console.log(\"Spawned obstacle with ID \"+this.mesh.id+\" at position X:\"+this.mesh.position.x+\" Y:\"+this.mesh.position.y+\" Z:\"+this.mesh.position.z)\n        }\n    }\n\n    applyForce(force,point){\n        console.log(\"Apply force to obstacle: \",this.physicsBody.position)\n        console.log(force)\n        console.log(point)\n        this.physicsBody.applyImpulse(force,point);\n        // this.physicsBody.applyForce(force,point);\n    }\n\n\n\n    \n}\nexport{Obstacle}","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"inGJz\")).toString();","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"iA8Lz\\\":\\\"index.ab658ea0.js\\\",\\\"inGJz\\\":\\\"Crate.487aa5f3.gltf\\\"}\"));"],"names":["$ilwiq","parcelRequire","$e1904cdb2d4a5682$export$83b45c7b75260f83","loaded","gltfLoader","$7lx9d","GLTFLoader","obstacleAsset","URL","load","href","gltf","root","Object3D","add","scene","clips","animations","yBodyDisplacement","constructor","world","x","y","z","is_spawned","this","mesh","$86dMk","clone","traverse","node","isMesh","castShadow","bind","position","set","scale","size","$hrRcj","Vec3","ostacoliPhysMat","ContactMaterial","Material","friction","restitution","shape","Box","BodyCANNON","Body","mass","material","type","DYNAMIC","addBody","physicsBody","undefined","console","log","id","applyForce","force","point","applyImpulse","module","exports","resolve","import","meta","url","toString","register","JSON","parse"],"version":3,"file":"index.ab658ea0.js.map"}